name: build

on:
  schedule:
    - cron: '52 7 * * *'  # daily at 7:52

  push:
    branches:
      - master
    paths:
      - '**.py'
      - '**.sh'
      - '**.sql'

  workflow_dispatch:

concurrency:
  group: build
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Create cache key for RB tables
        id: cachekey
        run: |
          set -xeu
          KEY="RB Tables $(curl -s https://rebrickable.com/downloads/ \
            | grep -Po '<span class="pull-right"><small>\K[^<]+' \
            | head -1 \
            | tr -d , \
            | grep -Px '\w+ \d{1,2} \d{4} \d{1,2}:\d{2} [ap]\.m\.' \
            || date --utc "+%Y%m%d%H")"
          echo "key=${KEY}" >> $GITHUB_OUTPUT

      - name: Set up cache for RB tables
        uses: actions/cache@v4
        with:
          path: data/*.csv
          key: ${{ steps.cachekey.outputs.key }}

      - name: Build database
        run: bash -x build.sh && ls -l data

      - name: Cache database dump hash
        uses: actions/cache@v4
        with:
          path: data/rb.dump.md5
          key: SQL Dump Hash

      - name: Compare database dump hashes
        id: hash
        run: |
          set -xeu
          cd data
          sqlite3 rb.db .dump > rb.dump
          REGEX="INSERT INTO rb_db_lov VALUES\('data_timestamp','\d+'\);"
          grep -qPx "$REGEX" rb.dump
          grep -vPx "$REGEX" rb.dump | md5sum | cut -d\  -f1 > rb.dump.md5.new
          SAME=1
          test -f rb.dump.md5 && diff rb.dump.md5{,.new} > /dev/null || SAME=0
          mv -f rb.dump.md5{.new,}
          echo "same=${SAME}" >> $GITHUB_OUTPUT

      - name: Prepare release files
        if: ${{ steps.hash.outputs.same == '0' }}
        run: |
          set -xeu
          cd data
          shasum -a256 rb.db > rb.db.sha256
          xz -k rb.db

      - name: Create release
        if: ${{ steps.hash.outputs.same == '0' }}
        id: release
        run: |
          set -xeu
          TS="$(sqlite3 data/rb.db "SELECT value FROM rb_db_lov WHERE key = 'data_timestamp'")"
          RELNAME="$(date -d"@$TS" --utc +'%Y-%m-%d %H:%M')"
          echo "relname=${RELNAME}" >> $GITHUB_OUTPUT
          TAGNAME="${RELNAME//[ :]/-}"
          gh release create "$TAGNAME" --target master --title "$RELNAME" data/rb.db.*
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Update latest release
        if: ${{ steps.hash.outputs.same == '0' }}
        run: |
          set -xeu
          RELNAME="Latest (${{ steps.release.outputs.relname }})"
          TAGNAME="latest"
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          sleep 13.37
          gh release create "$TAGNAME" --target master --title "$RELNAME" data/rb.db.*
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Deploy site
        if: ${{ steps.hash.outputs.same == '0' }}
        run: |
          set -xeu
          WORKFLOW_ID="$(gh workflow list | grep -Poi 'site.+\s\K\d+$')"
          gh workflow run "$WORKFLOW_ID"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Prune old releases
        if: ${{ steps.hash.outputs.same == '0' }}
        run: ./utils/prune_old_releases.sh
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Prune old caches
        run: |
          set -xeu
          NKEEP=5
          gh cache list --json id --jq ".[].id" | tail -n+$((NKEEP+1)) | xargs -rn1 gh cache delete
        env:
          GH_TOKEN: ${{ secrets.PAT }}
